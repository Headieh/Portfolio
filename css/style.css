/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}@-webkit-keyframes stars{0%{background-position:0 -9199px}to{background-position:0 0}}@keyframes stars{0%{background-position:0 -9199px}to{background-position:0 0}}@-webkit-keyframes float{0%,to{transform:translate(20px,20px)}50%{transform:translate(20px,50px)}}@keyframes float{0%,to{transform:translate(20px,20px)}50%{transform:translate(20px,50px)}}@-webkit-keyframes sigit-float-behind{0%,to{transform:translate(20px)}50%{transform:translate(20px,20px)}}@keyframes sigit-float-behind{0%,to{transform:translate(20px)}50%{transform:translate(20px,20px)}}@-webkit-keyframes sigit-float-bg{0%,to{transform:translate(20px)}50%{transform:translate(20px,50px)}}@keyframes sigit-float-bg{0%,to{transform:translate(20px)}50%{transform:translate(20px,50px)}}@-webkit-keyframes astronaut{0%,to{transform:scale(1)}50%{transform:scale(2)}}@keyframes astronaut{0%,to{transform:scale(1)}50%{transform:scale(2)}}.main{padding:2rem}body{font-family:Montserrat;font-weight:lighter}img{width:100%;padding:1em;margin:1em;max-width:23rem}.card .project{padding:0;margin:1em;border-style:solid;border-radius:20px;height:95%}.card .project>h2{border-radius:20px 20px 0 0;background-image:linear-gradient(to bottom right,grey,#add8e6);text-align:center}.carousel-control-next-icon,.carousel-control-prev-icon{-webkit-filter:invert(1);filter:invert(1)}.carousel{width:28rem;overflow:hidden}.carousel-item h5,.carousel-item p{text-align:center}.carousel-item>img{-o-object-fit:contain;object-fit:contain;height:18.75rem;width:100%;margin:auto}h6{text-align:center;padding:.5rem}p{padding:1em;margin:1em}.education>article>p{padding:0;margin:0}article{padding:1em}.navbar,.navbar>.nav-item{display:block;list-style-type:none;vertical-align:text-top}.tech,.tech>li{display:block}.modal{background-image:linear-gradient(to bottom right,#fff,#000);background-repeat:no-repeat;background-size:cover}.card{border-style:none}a,i{color:#120d7f;padding:1rem;text-align:left}a:hover,i:hover{color:#2b22e9}i:active,i:hover{transform:rotate(1turn);transition:transform 1s}form{margin-left:25%;margin-right:25%;width:50%}p:first-of-type{font-weight:bolder;margin-top:1em}nav{font-family:Cinzel}.card-header{background-image:linear-gradient(to bottom right,grey,#e6e6fa)}.card-header h2>button{color:#000;font-weight:bolder}button,input,textarea{background-color:#fafafa;border-width:thin;border-style:solid;border-bottom:thin solid #4d4d4d}.close{text-align:right;margin:1em;padding:1em;width:10%}button,input,label,select,textarea{font-family:inherit;font-size:100%;box-sizing:border-box;color:#000;padding:1em;display:block;text-align:left;width:100%;margin:auto}input[type=submit]{width:50%;color:#fff;text-align:center;background-color:#cb326d}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
